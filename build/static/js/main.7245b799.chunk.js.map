{"version":3,"sources":["components/characterCard.jsx","components/characterTable.jsx","components/topMenu.jsx","App.js","serviceWorker.js","index.js"],"names":["CharacterCard","_ref","title","img","created","status","species","loc","creado","Date","console","log","fecha","getDate","getMonth","slice","getFullYear","statusClassName","toLowerCase","iconStatus","react_default","a","createElement","className","style","width","src","alt","index_es","icon","CharacterTable","characters","this","props","map","char","characterCard","key","id","name","image","location","Component","TopMenu","Nav","activeKey","onSelect","Item","Link","eventKey","href","NavDropdown","episodes","episode","library","add","faHeart","faCaretRight","faSkullCrossbones","faQuestionCircle","faMapMarkerAlt","faUser","App","state","selectedEpisode","page","showing","nextPage","handleSelect","_callee","_ref2","info","charactersIds","_characters","regenerator_default","wrap","_context","prev","next","getCharacter","sent","results","_this","setState","x","stop","getEpisode","window","onscroll","Object","asyncToGenerator","mark","_callee2","newChars","_characters2","_context2","innerHeight","document","documentElement","scrollTop","offsetHeight","_this2","concat","toConsumableArray","Fragment","topMenu","characterTable","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7245b799.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\n\r\nconst CharacterCard = ({title,img,created,status,species,loc}) => {\r\n    \r\n    const creado = new Date(created);\r\n    console.log(creado + ' - ' + created )\r\n    const fecha = (\"0\" + creado.getDate()) + '/' + (\"0\" + (creado.getMonth() + 1)).slice(-2) + '/' + creado.getFullYear();\r\n    \r\n    let statusClassName = status.toLowerCase();\r\n    let iconStatus = (statusClassName===\"dead\")?'skull-crossbones':'heart';\r\n    if(statusClassName==='unknown')iconStatus='question-circle';\r\n    statusClassName+=\" card\";\r\n\r\n \r\n    \r\n\r\n    return ( \r\n        <article>\r\n        <div className={statusClassName} style={{width: '18rem'}} >\r\n            <img src={ img } className=\"card-img-top\" alt={title} />\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">{title}</h5>\r\n            </div>\r\n            <ul className=\"list-group list-group-flush\">\r\n                <li className=\"list-group-item\"><FontAwesomeIcon icon=\"user\" className='icon'/>{species}</li>\r\n                <li className=\"list-group-item\"><FontAwesomeIcon icon='map-marker-alt' className='icon'/>{loc}</li>\r\n                <li className=\"list-group-item\"><FontAwesomeIcon icon={iconStatus} className='icon'/>{(status==='unknown')?\"Unknown Status\":status}</li>\r\n            </ul>\r\n            <div className=\"card-body metadata\">\r\n            created on\r\n            <FontAwesomeIcon icon=\"caret-right\" className='icon' /> {fecha}\r\n            </div>\r\n        </div>\r\n        </article>\r\n      );\r\n}\r\n \r\nexport default CharacterCard","import React, { Component } from \"react\";\r\nimport CharacterCard from \"./characterCard\";\r\n\r\nclass CharacterTable extends Component {\r\n\r\n  render() {\r\n    const characters = this.props.characters;\r\n\r\n    return (\r\n      <section>\r\n        {characters.map(char => (\r\n          <CharacterCard key={char.id} title={char.name} img={char.image} species={char.species} loc={char.location.name} status={char.status} created={char.created}/>\r\n        ))}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CharacterTable;\r\n\r\n\r\n","import React, { Component } from \"react\";\r\nimport{Nav} from 'react-bootstrap';\r\nimport {NavDropdown} from 'react-bootstrap';\r\n\r\nclass TopMenu extends Component {\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"jumbotron jumbotron-fluid\">\r\n        <div className=\"container\">\r\n          <h1 className=\"display-4\">Rick and Morty Character Guide</h1>\r\n          <p className=\"lead\">\r\n            Look and search for all Rick and Morty Characters\r\n          </p>\r\n\r\n          <Nav activeKey=\"all\" onSelect={this.props.onSelect}>\r\n\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"all\" href=\"#\">\r\n                Show all the characters\r\n              </Nav.Link>\r\n            </Nav.Item>\r\n\r\n            <NavDropdown title={this.props.title} id=\"nav-dropdown\">\r\n            {this.props.episodes.map( episode => (\r\n                <NavDropdown.Item key={episode.id} eventKey={episode.id}>{episode.episode}</NavDropdown.Item>\r\n            ))}\r\n            </NavDropdown>\r\n\r\n          </Nav>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TopMenu;\r\n","import React, { Component } from \"react\";\nimport CharacterTable from \"./components/characterTable\";\nimport TopMenu from './components/topMenu';\nimport { getCharacter, getEpisode } from \"rickmortyapi\";\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport \"./App.css\";\n\n\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faHeart, faCaretRight, faSkullCrossbones, faQuestionCircle, faMapMarkerAlt,faUser} from '@fortawesome/free-solid-svg-icons';\nlibrary.add([faHeart,faCaretRight,faSkullCrossbones,faQuestionCircle,faMapMarkerAlt,faUser])\n\n\nclass App extends Component {\n\n  state={\n    episodes:[],\n    selectedEpisode:'Filter by Episode',\n    characters: [],\n    page:1,\n    showing:\"all\",\n    nextPage:''\n  }\n\n   handleSelect = async (eventKey) => {\n \n    if(eventKey==='all'){\n      const {results: characters, info}= await getCharacter();\n      this.setState({selectedEpisode:'Filter by Episode', showing:'all', characters, page:1, nextPage:info.next})\n    }else{\n      const  charactersIds = this.state.episodes[eventKey-1].characters.map(x=>x.slice(42));\n      const characters = await getCharacter(charactersIds);\n      this.setState({selectedEpisode:this.state.episodes[eventKey-1].episode, showing:'episode', characters, nextPage:''});\n    }\n\n  }\n\n  async componentDidMount() {\n    const { results: characters, info } = await getCharacter();\n    const {results:episodes} = await getEpisode();\n    this.setState({ characters, nextPage:info.next, episodes });\n    \n    window.onscroll = async() => {\n        if (\n          window.innerHeight + document.documentElement.scrollTop\n          === document.documentElement.offsetHeight\n        ) {\n         if(this.state.nextPage!==''){\n              const page = this.state.page +1;\n              const newChars = await getCharacter({page});\n              const characters = [ ...this.state.characters, ...newChars.results]\n              this.setState({characters,nextPage:newChars.info.next,page})\n         }\n         \n        }\n      };\n  }\n\n\nrender() {\nreturn (\n<React.Fragment>\n  <header>\n     <TopMenu onSelect={this.handleSelect} episodes={this.state.episodes} title={this.state.selectedEpisode}/>\n  </header>\n  <main className=\"container\">\n    <CharacterTable characters={this.state.characters} />\n  </main>\n</React.Fragment>\n);\n}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}